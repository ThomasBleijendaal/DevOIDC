@inherits BasePropertyEditor

@if (Scopes != null)
{
    <div class="form-control form-control-select-list @(CssHelper.GetDisplayModifier(DisplayType)) @(CssHelper.GetValidationClass(State))">
        @{
            var index = 0;
        }
        @foreach (var scope in Scopes)
        {
            var thisIndex = index;

            <div class="form-check" style="padding-left: .25rem; margin-right: .25rem;">
                <div class="row">
                    <div class="col">
                        <input @bind-value=@scope.ScopeId
                               disabled=@IsDisabled
                               placeholder="Scope ID"
                               @onkeypress=@OnChange
                               class="form-control" />
                    </div>

                    <div class="col">
                        <input @bind-value=@scope.Description
                               disabled=@IsDisabled
                               placeholder="Scope description"
                               @onkeypress=@OnChange
                               class="form-control" />
                    </div>
                    <div class="col col-auto">
                        <button class="btn" @onclick=@((e) => RemoveRow(thisIndex))><Icon Name="Remove" /></button>
                    </div>
                </div>
            </div>

            index++;
        }

        <div class="form-check" style="padding-left: .25rem; margin-right: .25rem;">
            <div class="row">
                <div class="col">
                    <button class="btn btn-light" @onclick=AddRow><Icon Name="Add" /> Add scope</button>
                </div>
            </div>
        </div>
    </div>

    @foreach (var message in GetValidationMessages())
    {
        <div class="invalid-feedback">
            @message
        </div>
    }
}

@code {

    private List<ScopeDto>? Scopes;

    protected override void OnParametersSet()
    {
        Scopes = GetValueAsObject() as List<ScopeDto> ?? new List<ScopeDto>();

        StateHasChanged();
    }

    private async Task OnChange(KeyboardEventArgs args)
    {
        await Update();
    }

    private void AddRow(MouseEventArgs args)
    {
        Scopes?.Add(new ScopeDto { Description = "", ScopeId = "" });
        StateHasChanged();
    }

    private async Task RemoveRow(int index)
    {
        Scopes?.RemoveAt(index);

        await Update();

        StateHasChanged();
    }

    private async Task Update()
    {
        await SetValueFromObjectAsync(Scopes?.ToList() ?? new List<ScopeDto>());
    }
}
